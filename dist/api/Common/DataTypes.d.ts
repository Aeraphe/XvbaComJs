/// <reference types="node" />
/// <reference types="ref-napi" />
export declare type BigIntStr = bigint | string;
export declare type _POINTER = Buffer;
export declare type ATOM = number;
export declare type DWORD = number;
export declare type PVOID = Buffer;
/**
 * `uint32` or `uint64` used as value usage (memory address) instead of PVOID (Buffer),
 * Use `HANDLE` (number) for params defintion of the api,
 * @see https://stackoverflow.com/questions/18266626/what-is-the-range-of-a-windows-handle-on-a-64-bits-application/29526711#29526711
 */
export declare type HANDLE = number | BigIntStr;
/**
 * `HANDLE_PVOID` (Buffer) can be used for definition of Struct,
 */
export declare type HANDLE_PVOID = _POINTER;
export declare type LONG_PTR = number | BigIntStr;
export declare type ULONG_PTR = number | BigIntStr;
export declare type VOID = number & Buffer & void;
export declare type WCHAR = UINT16;
export declare type WCHAR_String = string;
export declare type WORD = INT16;
export declare type BOOL = number;
export declare type BOOLEAN = boolean;
export declare type BYTE = number;
export declare type CALLBACK = _POINTER;
export declare type CCHAR = UINT8;
export declare type CHAR = UINT8;
export declare type COLORREF = number;
export declare type DWORDLONG = number;
export declare type DWORD_PTR = ULONG_PTR;
export declare type DWORD32 = number;
export declare type DWORD64 = number;
export declare type FLOAT = number;
export declare type HACCEL = HANDLE;
export declare type HALF_PTR = number;
export declare type HBITMAP = HANDLE;
export declare type HBRUSH = HANDLE;
export declare type HCOLORSPACE = HANDLE;
export declare type HCONV = HANDLE;
export declare type HCONVLIST = HANDLE;
export declare type HCURSOR = HANDLE;
export declare type HDC = HANDLE;
export declare type HDDEDATA = HANDLE;
export declare type HDESK = HANDLE;
export declare type HDROP = HANDLE;
export declare type HDWP = HANDLE;
export declare type HENHMETAFILE = HANDLE;
export declare type HFILE = HANDLE;
export declare type HFONT = HANDLE;
export declare type HGDIOBJ = HANDLE;
export declare type HGLOBAL = HANDLE;
export declare type HHOOK = HANDLE;
export declare type HICON = HANDLE;
export declare type HINSTANCE = HANDLE;
export declare type HKEY = HANDLE;
export declare type HKL = HANDLE;
export declare type HLOCAL = HANDLE;
export declare type HMENU = HANDLE;
export declare type HMETAFILE = HANDLE;
export declare type HMODULE = HINSTANCE;
export declare type HMONITOR = HANDLE;
export declare type HPALETTE = HANDLE;
export declare type HPEN = HANDLE;
export declare type HRESULT = LONG;
export declare type HRGN = HANDLE;
export declare type HRSRC = HANDLE;
export declare type HSZ = HANDLE;
export declare type HWINEVENTHOOK = HANDLE;
export declare type HWINSTA = HANDLE;
export declare type HWND = HANDLE;
/** A 32-bit signed integer */
export declare type INT = number;
export declare type INT_PTR = number | BigIntStr;
export declare type INT8 = number;
export declare type INT16 = number;
export declare type INT32 = number;
export declare type INT64 = BigIntStr;
export declare type LANGID = WORD;
export declare type LCID = DWORD;
export declare type LCTYPE = DWORD;
export declare type LGRPID = DWORD;
export declare type LONG = number;
export declare type LONGLONG = BigIntStr;
export declare type LONG32 = number;
export declare type LONG64 = BigIntStr;
export declare type LPARAM = LONG_PTR;
export declare type LPBOOL = _POINTER;
export declare type LPBYTE = _POINTER;
export declare type LPCOLORREF = _POINTER;
export declare type LPCSTR = _POINTER;
export declare type LPCWSTR = PUINT8;
export declare type LPCTSTR = PUINT16;
export declare type LPVOID = _POINTER;
export declare type LPCVOID = LPVOID;
export declare type LPDWORD = PUINT16;
export declare type LPHANDLE = _POINTER;
export declare type LPINT = PINT;
export declare type LPLONG = PINT32;
export declare type LPMSG = _POINTER;
export declare type LPPOINT = _POINTER;
export declare type LPSTR = _POINTER;
export declare type LPWSTR = PUINT16;
export declare type LPTSTR = _POINTER;
export declare type LPWORD = PUINT16;
export declare type LRESULT = number;
export declare type NTSTATUS = UINT32;
export declare type PBOOL = _POINTER;
export declare type PBOOLEAN = _POINTER;
export declare type PBYTE = _POINTER;
export declare type PCHAR = _POINTER;
export declare type PCSTR = PUINT8;
export declare type PCTSTR = _POINTER;
export declare type PCWSTR = PUINT16;
export declare type PDWORD = PUINT32;
export declare type PDWORDLONG = PUINT64;
export declare type PDWORD_PTR = DWORD_PTR;
export declare type PDWORD32 = _POINTER;
export declare type PDWORD64 = _POINTER;
export declare type PFLOAT = _POINTER;
export declare type PHALF_PTR = _POINTER;
export declare type PHANDLE = _POINTER;
export declare type PHKEY = _POINTER;
export declare type PINT = _POINTER;
export declare type PINT_PTR = _POINTER;
export declare type PINT8 = _POINTER;
export declare type PINT16 = _POINTER;
export declare type PINT32 = _POINTER;
export declare type PINT64 = _POINTER;
export declare type PLCID = _POINTER;
export declare type PLONG = _POINTER;
export declare type PLONGLONG = _POINTER;
export declare type PLONG_PTR = _POINTER;
export declare type PLONG32 = _POINTER;
export declare type PLONG64 = _POINTER;
export declare type POINTER_32 = _POINTER;
export declare type POINTER_64 = _POINTER;
export declare type POINTER_SIGNED = _POINTER;
export declare type POINTER_UNSIGNED = _POINTER;
export declare type PSHORT = _POINTER;
export declare type PSIZE_T = _POINTER;
export declare type PSSIZE_T = _POINTER;
export declare type PSTR = _POINTER;
export declare type PTBYTE = _POINTER;
export declare type PTCHAR = _POINTER;
export declare type PTSTR = _POINTER;
export declare type PUCHAR = _POINTER;
export declare type PUHALF_PTR = _POINTER;
export declare type PUINT = _POINTER;
export declare type PUINT_PTR = _POINTER;
export declare type PUINT8 = _POINTER;
export declare type PUINT16 = _POINTER;
export declare type PUINT32 = _POINTER;
export declare type PUINT64 = _POINTER;
export declare type PULONG = _POINTER;
export declare type PULONGLONG = _POINTER;
export declare type PULONG_PTR = _POINTER;
export declare type PULONG32 = _POINTER;
export declare type PULONG64 = _POINTER;
export declare type PUSHORT = _POINTER;
export declare type PWCHAR = _POINTER;
export declare type PWORD = _POINTER;
export declare type PWSTR = _POINTER;
export declare type QWORD = _POINTER;
export declare type SC_HANDLE = HANDLE;
export declare type SC_LOCK = LPVOID;
export declare type SERVICE_STATUS_HANDLE = HANDLE;
export declare type SHORT = number;
export declare type SIZE_T = number;
export declare type SSIZE_T = number;
export declare type TBYTE = number;
export declare type TCHAR = string;
export declare type UCHAR = string;
export declare type UHALF_PTR = number;
export declare type UINT = number;
export declare type UINT_PTR = number | BigIntStr;
export declare type UINT8 = number;
export declare type UINT16 = number;
export declare type UINT32 = number;
export declare type UINT64 = BigIntStr;
export declare type ULONG = number;
export declare type ULONGLONG = BigIntStr;
export declare type ULONG32 = number;
export declare type ULONG64 = BigIntStr;
export declare type UNICODE_STRING = _POINTER;
export declare type USHORT = number;
export declare type USN = LONGLONG;
export declare type WINEVENTPROC = Buffer;
export declare type WNDENUMPROC = Buffer;
export declare type WNDPROC = Buffer;
export declare type WPARAM = UINT_PTR;
export declare type LPINITCOMMONCONTROLSEX = _POINTER;
export declare type LPWNDCLASSEX = _POINTER;
export declare type PWINDOWINFO = _POINTER;
export declare type PFILETIME = _POINTER;
export declare type LPFILETIME = _POINTER;
export declare type va_list = _POINTER;
